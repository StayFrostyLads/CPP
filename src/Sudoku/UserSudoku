class UserSudoku {
  public:

    // Calling necessary method from BoxColRowCheck class
    BoxColRowCheck check;
 
    bool solveuserBoard(int userBoard[N][N], int row, int col){

      // Check to see if we have reached the 8th row and 9th column
    if (row == N - 1 && col == N)
        return true;
      // Check to see if we have reached the 9th column in which case we go to the next row
    if (col == N) {
        row++;
        col = 0;
    }
      // Check to see if the position of the board already contains a non zero value, iterate for next column
    if (userBoard[row][col] != 0)
        return solveuserBoard(userBoard, row, col + 1);

     for (int num = 1; num <= N; num++) {
      // Check to see if we are allowed to place the num (1-9) in the given row and column, in which case we move to next column
      if (check.numberCheck(userBoard, row, col, num))
      {
        userBoard[row][col] = num;
      // Check for next possible num for next column
        if (solveuserBoard(userBoard, row, col + 1))
            return true;
      }
      // Removing the assigned number if it can't go there and try the next number
      userBoard[row][col] = 0;
    } 
    return false;
  }

  bool inputCheck(int userBoard[N][N]) {
      int counter = 0;
      for (int i = 0; i < N; i++) {
        for (int j = 0; j < N; j++) {
          if (userBoard[i][j] != 0) {
            counter++;
            if (check.numberCheck(userBoard, i, j, userBoard[i][j])){
              return false;
            }
          }
        }
      }
    if (counter < 17) {
    return false;
    }
    return true;
  }
};
